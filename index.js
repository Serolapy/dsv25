import VkBot from 'node-vk-bot-api';
import Scene from 'node-vk-bot-api/lib/scene.js';
import Session from 'node-vk-bot-api/lib/session.js';
import Stage from 'node-vk-bot-api/lib/stage.js';
import Markup from 'node-vk-bot-api/lib/markup.js';

import fetch from 'node-fetch';
import { FormData } from 'node-fetch';
import fs from 'fs';
import { createReadStream } from 'node:fs';
import { stat } from 'node:fs/promises';

import generator from './image/generator.js';

export default function startBot (config, database){
	const MAX_LENGTH_TEXT = 200;			// –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–∏–º–≤–æ–ª–æ–≤ –≤ –≤–∞–ª–µ–Ω—Ç–∏–Ω–∫–µ
	const bot = new VkBot({
		token: config.tokenValues.kupidon,
		confirmation: config.tokenValues.kupidon_confirmation,
	});
	const profbot = new VkBot({
		token: config.tokenValues.profcom,
		confirmation: config.tokenValues.profcom_confirmation,
	});
	
	const scene = new Scene('valentinki',
		async (ctx) => {
			try{
				ctx.scene.next();
				ctx.reply('–ù–∞—á–∏–Ω–∞–µ–º –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –≤–∞–ª–µ–Ω—Ç–∏–Ω–∫–∏. –í—Å—Ç–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∫–æ—Ç–æ—Ä–æ–º—É –≤—ã —Ö–æ—Ç–∏—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≤–∞–ª–µ–Ω—Ç–∏–Ω–∫—É. –ü—Ä–∏–º–µ—Ä —Å—Å—ã–ª–∫–∏: https://vk.com/vladi6008');
			} catch (error) {
				console.error('–û—à–∏–±–∫–∞ —Ä–∞–±–æ—Ç–µ –±–æ—Ç–∞:', error);
				await ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–ø–æ–ª–Ω–∏—Ç—å –≤–∞–ª–µ–Ω—Ç–∏–Ω–∫—É —Å–Ω–æ–≤–∞.');
				ctx.scene.leave();
			}
		  },
		  async (ctx) => {
			try{
			let username;
		
			try{
				username = ctx.message.text.match(/(?:vk\.com\/(?:id)?|@)([a-zA-Z0-9_.]+)/)[1];
			}
			catch(err){
				ctx.scene.step = 1;
				ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å—Å—ã–ª–∫—É –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑');
				return
			}
			const users = await bot.execute("users.get", {user_ids:username})
			if (!users.length){
				ctx.scene.step = 1;
				ctx.reply('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å—Å—ã–ª–∫—É –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑');
				return
			}
			const user = users[0];
			await bot.sendMessage(ctx.message.from_id, `–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–π–¥–µ–Ω: —ç—Ç–æ ${user.last_name} ${user.first_name}`);
		
			try{
				const can_write = await profbot.execute("messages.setActivity", {user_id: user.id, type: 'typing'});
			}
			catch(err){
				ctx.scene.leave();
				ctx.reply('–£–ø—Å... –ú—ã –Ω–µ –º–æ–∂–µ–º –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≤–∞–ª–µ–Ω—Ç–∏–Ω–∫—É —ç—Ç–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é, –ø–æ—Å–∫–æ–ª—å–∫—É –æ–Ω –Ω–∏ —Ä–∞–∑—É –Ω–µ –ø–∏—Å–∞–ª —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —Å–æ–æ–±—â–µ—Å—Ç–≤–µ –ü—Ä–æ—Ñ–∫–æ–º–∞ —Å—Ç—É–¥–µ–Ω—Ç–æ–≤ –ü—Å–∫–æ–≤–ì–£. –î–ª—è —Ç–æ–≥–æ, —á—Ç–æ–±—ã –º—ã –º–æ–≥–ª–∏ –¥–æ—Å—Ç–∞–≤–∏—Ç—å –≤–∞–ª–µ–Ω—Ç–∏–Ω–∫—É, –µ—ë –ø–æ–ª—É—á–∞—Ç–µ–ª—å –¥–æ–ª–∂–µ–Ω —Ä–∞–∑—Ä–µ—à–∏—Ç—å —Å—Å–æ–±—â–µ–Ω–∏—è –æ—Ç —Å–æ–æ–±—â–µ—Å—Ç–≤–∞ –∏–ª–∏ –Ω–∞–ø–∏—Å–∞—Ç—å —á—Ç–æ-—Ç–æ –≤ –õ–°');
				return
			}
			  ctx.session.to = user.id;
		
			  ctx.scene.next();
			  ctx.reply(`–¢–µ–ø–µ—Ä—å –Ω–∞–ø–∏—à–∏—Ç–µ —Ç–µ–∫—Å—Ç –≤–∞–ª–µ–Ω—Ç–∏–Ω–∫–∏. –£—á—Ç–∏—Ç–µ, —á—Ç–æ —Ç–µ–∫—Å—Ç –≤–∞–ª–µ–Ω—Ç–∏–Ω–∫–∏ –Ω–µ –¥–æ–ª–∂–µ–Ω –ø—Ä–µ–≤—ã—à–∞—Ç—å ${MAX_LENGTH_TEXT} —Å–∏–º–≤–æ–ª–æ–≤. –ú–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ç–æ–ª—å–∫–æ –±—É–∫–≤—ã –ª–∞—Ç–∏–Ω—Å–∫–æ–≥–æ –∏ –∫–∏—Ä–∏–ª–ª–∏—á–µ—Å–∫–æ–≥–æ –∞–ª—Ñ–∞–≤–∏—Ç–æ–≤, —Ü–∏—Ñ—Ä—ã, –∞ —Ç–∞–∫–∂–µ –∑–Ω–∞–∫–∏ –ø—Ä–µ–ø–∏–Ω–∞–Ω–∏—è`);
			} catch (error) {
				console.error('–û—à–∏–±–∫–∞ —Ä–∞–±–æ—Ç–µ –±–æ—Ç–∞:', error);
				await ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.');
				ctx.scene.leave();
			}
			},
		  async (ctx) => {
			try{
			if (ctx.message.text.length > MAX_LENGTH_TEXT){
				ctx.scene.step = 2;
				ctx.reply(`–í—ã –ø—Ä–µ–≤—ã—Å–∏–ª–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ–ø—É—Å—Ç–∏–º—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤: (${MAX_LENGTH_TEXT}). –ù–∞–ø–∏—à–∏—Ç–µ —Ç–µ–∫—Å—Ç –≤–∞–ª–µ–Ω—Ç–∏–Ω–∫–∏ –µ—â—ë —Ä–∞–∑.`);
				return
			}

			const regex = /^[–∞-—è–ê-–Ø0-9\s\.,!?-]+$/;
			if (! regex.test(ctx.message.text)){
				ctx.scene.step = 2;
				ctx.reply(`–í—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª–∏ –Ω–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–µ —Å–∏–º–≤–æ–ª—ã. –ù–∞–ø–∏—à–∏—Ç–µ —Ç–µ–∫—Å—Ç –≤–∞–ª–µ–Ω—Ç–∏–Ω–∫–∏ –µ—â—ë —Ä–∞–∑.`);
				return
			}	  		
			ctx.session.text = ctx.message.text;

			ctx.scene.next();
			  ctx.reply(`–ö–∞–∫ –≤—ã —Ö–æ—Ç–∏—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≤–∞–ª–µ–Ω—Ç–∏–Ω–∫—É?`, null, Markup.keyboard([
				Markup.button('–ê–Ω–æ–Ω–∏–º–Ω–æ', 'primary'),
				Markup.button('–ù–µ –∞–Ω–æ–Ω–∏–º–Ω–æ', 'secondary')
			]).oneTime());
		} catch (error) {
			console.error('–û—à–∏–±–∫–∞ —Ä–∞–±–æ—Ç–µ –±–æ—Ç–∞:', error);
			await ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.');
			ctx.scene.leave();
		}
		  },
		  async (ctx) => {
			try{
			switch(ctx.message.text){
				case '–ê–Ω–æ–Ω–∏–º–Ω–æ':
					ctx.session.anon = true;
					break;
				case '–ù–µ –∞–Ω–æ–Ω–∏–º–Ω–æ':
					ctx.session.anon = false;
					break;
				default:
					ctx.scene.step = 3;
					ctx.reply(`–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –∫–Ω–æ–ø–∫–∞–º–∏`, null, Markup.keyboard([
						Markup.button('–ê–Ω–æ–Ω–∏–º–Ω–æ', 'primary'),
						Markup.button('–ù–µ –∞–Ω–æ–Ω–∏–º–Ω–æ', 'secondary')
					]).oneTime());
					return
			};
		
			
			const canvas = await generator(ctx.session.text);
			if (!canvas){
				ctx.reply(`–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –≤–∞–ª–µ–Ω—Ç–∏–Ω–∫–∏. –ù–∞–ø–∏—à–∏—Ç–µ —Ç–µ–∫—Å—Ç –≤–∞–ª–µ–Ω—Ç–∏–Ω–∫–∏ –µ—â—ë —Ä–∞–∑, —Å–¥–µ–ª–∞–π—Ç–µ –µ–≥–æ –ø–æ–º–µ–Ω—å—à–µ.`);
				return
			}
			const temp_name = `./temp/valentine_${ctx.message.peer_id}_${Date.now()}.png`;
			const buffer = canvas.toBuffer("image/png");
			fs.writeFileSync(temp_name, buffer);


			const uploadServer = await bot.execute('photos.getMessagesUploadServer', { peer_id: ctx.message.peer_id });
			const formData = new FormData();

let blob = await new Promise(resolve => canvas.toBlob(resolve, 'image/png'));
// –î–æ–±–∞–≤–ª—è–µ–º —Ñ–∞–π–ª –≤ FormData –∫–∞–∫ –ø–æ—Ç–æ–∫
formData.append('photo', blob, 'valentine.png');

const response_upload_data = await fetch(uploadServer.upload_url, {
    method: 'POST',
    body: formData
});
			const upload_data = await response_upload_data.json();
			const data = await bot.execute('photos.saveMessagesPhoto', {
				photo: upload_data.photo,
				server: upload_data.server,
				hash: upload_data.hash
			});
			ctx.scene.next();
			ctx.session.temp_name = temp_name;

			const users = await bot.execute("users.get", {user_ids: ctx.session.to})
			const user = users[0];
			
			await bot.execute('messages.send', {
				peer_id: ctx.message.peer_id,
				message: `–û—Ç–ø—Ä–∞–≤–ª—è–µ–º —ç—Ç—É –≤–∞–ª–µ–Ω—Ç–∏–Ω–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é @id${user.id} (${user.first_name} ${user.last_name})${ctx.session.anon ? ' –∞–Ω–æ–Ω–∏–º–Ω–æ' : ', —É–∫–∞–∑–∞–≤ –≤–∞—Å –∫–∞–∫ –∞–≤—Ç–æ—Ä–∞'}?`,
				attachment: `photo${data[0].owner_id}_${data[0].id}`,
				random_id: Math.floor(Math.random() * 1000000),
				keyboard: Markup.keyboard([
					Markup.button('–î–∞', 'positive'),
					Markup.button('–ù–µ—Ç', 'negative')
				]).oneTime()
			})
		} catch (error) {
			console.error('–û—à–∏–±–∫–∞ —Ä–∞–±–æ—Ç–µ –±–æ—Ç–∞:', error);
			await ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.');
			ctx.scene.leave();
		}
		},
		async (ctx) => {
			try{
			switch(ctx.message.text){
				case '–î–∞':
					const users = await bot.execute("users.get", {user_ids: ctx.message.from_id})
					const user = users[0];

					const uploadServer = await profbot.execute('photos.getMessagesUploadServer', { peer_id: ctx.message.peer_id });
					const formData = new FormData();
					const temp_name = ctx.session.temp_name;
					// –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ñ–∞–π–ª–µ

// let blob = await new Promise(resolve => canvas.toBlob(resolve, 'image/png'));

// –î–æ–±–∞–≤–ª—è–µ–º —Ñ–∞–π–ª –≤ FormData –∫–∞–∫ –ø–æ—Ç–æ–∫
formData.append('photo', blob, 'valentine.png');

const response_upload_data = await fetch(uploadServer.upload_url, {
    method: 'POST',
    body: formData
});
					const upload_data = await response_upload_data.json();
					const data = await profbot.execute('photos.saveMessagesPhoto', {
						photo: upload_data.photo,
						server: upload_data.server,
						hash: upload_data.hash
					});
				
					await profbot.execute('messages.send', {
						peer_id: ctx.session.to,
						message: `üíå –í–∞–º –ø—Ä–∏—à–ª–∞ ${ctx.session.anon ? '–∞–Ω–æ–Ω–∏–º–Ω–∞—è' : ''} –≤–∞–ª–µ–Ω—Ç–∏–Ω–∫–∞${ctx.session.anon ? '' : ` –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è @id${user.id} (${user.first_name} ${user.last_name})`}.`,
						attachment: `photo${data[0].owner_id}_${data[0].id}`,
						random_id: Math.floor(Math.random() * 1000000),
						keyboard: JSON.stringify({
							inline: true,
							buttons: [
							  [
								{
								  action: {
									type: "open_link",
									link: "https://vk.me/event224602951",
									label: "–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–≤–æ—é –≤–∞–ª–µ–Ω—Ç–∏–Ω–∫—É",
								  },
								},
							  ],
							],
						})
					});

					ctx.reply(`–í–∞–ª–µ–Ω—Ç–∏–Ω–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞!`, null, Markup.keyboard([
						Markup.button('–û—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–æ–≤—É—é –≤–∞–ª–µ–Ω—Ç–∏–Ω–∫—É', 'primary'),
					]).oneTime());
					ctx.scene.step = 0;
					fs.rmSync(temp_name);
					break;
				case '–ù–µ—Ç':
					ctx.reply(`–û—Ç–ø—Ä–∞–≤–∫–∞ –≤–∞–ª–µ–Ω—Ç–∏–Ω–∫–∏ –æ—Ç–º–µ–Ω–µ–Ω–∞`, null, Markup.keyboard([
						Markup.button('–û—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–æ–≤—É—é –≤–∞–ª–µ–Ω—Ç–∏–Ω–∫—É', 'primary'),
					]).oneTime());
					ctx.scene.step = 0;
					fs.rmSync(temp_name);
					break;
				default:
					ctx.scene.step = 4;
					ctx.reply(`–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –∫–Ω–æ–ø–∫–∞–º–∏`, null, Markup.keyboard([
						Markup.button('–î–∞', 'positive'),
						Markup.button('–ù–µ—Ç', 'negative')
					]).oneTime());
					return
			};
			ctx.scene.step = 0;
			
		}
		catch (error) {
			console.error('–û—à–∏–±–∫–∞ —Ä–∞–±–æ—Ç–µ –±–æ—Ç–∞:', error);
			await ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.');
			ctx.scene.leave();
		}
	} 
	);
	const session = new Session();
	const stage = new Stage(scene);
	
	bot.use(session.middleware());
	bot.use(stage.middleware());
	
	
	bot.on(async (ctx) => {
		const message = ctx.message;
	
		//–µ—Å–ª–∏ –Ω–∞–∂–∞–ª –Ω–∞ –∫–Ω–æ–ø–∫—É
		if (message['payload']){
			let payload = JSON.parse(message['payload']);
		
			switch(payload.action){
				case 'valent_start':
					ctx.scene.enter('valentinki')
					break;
				
			}
		}
		else{
			const markup = Markup.keyboard([
				Markup.button({
					action: {
						type: 'text',
						label: '–û—Ç–ø—Ä–∞–≤–∏—Ç—å –≤–∞–ª–µ–Ω—Ç–∏–Ω–∫—É',
						payload: JSON.stringify({
							action: 'valent_start'
						})
					}
				})
			]);
			ctx.reply('–ü—Ä–∏–≤–µ—Ç! –í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ:', null, markup.oneTime());
		}	
	});
	
	const plugin = new classes.Plugin(config);

	plugin.router.all('/kupidon', bot.webhookCallback);
	plugin.router.all('/profkom', profbot.webhookCallback);
	
	return plugin
}